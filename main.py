import numpy as np
import matplotlib.pyplot as plt
import streamlit as st
from PIL import Image
import tensorflow as tf
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau


# def create_convolutional_model():
# (x_train, y_train), (x_test, y_test) = cifar10.load_data()
# x_train = x_train.astype('float32') / 255
# x_test = x_test.astype('float32') / 255
# y_train = to_categorical(y_train, 10)
# y_test = to_categorical(y_test, 10)
#
# model = Sequential([
#     Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)),
#     BatchNormalization(),
#     Conv2D(32, (3, 3), activation='relu', padding='same'),
#     MaxPooling2D((2, 2)),
#     Dropout(0.25),
#
#     Conv2D(64, (3, 3), activation='relu', padding='same'),
#     BatchNormalization(),
#     Conv2D(64, (3, 3), activation='relu', padding='same'),
#     MaxPooling2D((2, 2)),
#     Dropout(0.25),
#
#     Conv2D(128, (3, 3), activation='relu', padding='same'),
#     BatchNormalization(),
#     Conv2D(128, (3, 3), activation='relu', padding='same'),
#     MaxPooling2D((2, 2)),
#     Dropout(0.25),
#
#     Flatten(),
#     Dense(256, activation='relu'),
#     BatchNormalization(),
#     Dropout(0.5),
#     Dense(128, activation='relu'),
#     Dropout(0.5),
#     Dense(10, activation='softmax')
# ])
#
# model.compile(
#     loss='categorical_crossentropy',
#     optimizer='adam',
#     metrics=['accuracy']
# )
#
# callbacks = [
#     EarlyStopping(patience=10, restore_best_weights=True),
#     ReduceLROnPlateau(factor=0.5, patience=5)
# ]
#
# st.write("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
# history = model.fit(
#     x_train, y_train,
#     batch_size=64,
#     epochs=10,
#     validation_data=(x_test, y_test),
#     callbacks=callbacks,
#     verbose=1
# )

# model.save('cifar_conv_model.keras')

def main():
    st.set_page_config(page_title="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", layout="wide")

    st.markdown("""
    <style>
    .main-header {
        font-size: 2.5rem;
        color: #FF4B4B;
        text-align: center;
        margin-bottom: 1rem;
    }
    .result-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        margin: 1rem 0;
    }
    .probability-bar {
        background: rgba(255,255,255,0.2);
        border-radius: 10px;
        padding: 0.5rem;
        margin: 0.5rem 0;
    }
    </style>
    """, unsafe_allow_html=True)

    st.markdown('<h1 class="main-header"> –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π </h1>', unsafe_allow_html=True)

    col1, col2 = st.columns([1, 1])

    with col1:
        st.subheader(" –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        file = st.file_uploader('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª .jpg –∏–ª–∏ .png', type=['jpg', 'png'],
                                help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")

        if not file:
            st.markdown("---")
            st.info("""
            - –û –º–æ–¥–µ–ª–∏:
            - –°–≤–µ—Ä—Ç–æ—á–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ CIFAR-10
            - 10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±—ä–µ–∫—Ç–æ–≤
             - –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: ~85%
             """)
        if file:
            image = Image.open(file)
            st.image(image, caption="–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)



    with col2:
        if file:
            st.subheader(" –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")

            with st.spinner(" –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                resized = image.resize((32, 32))
                img_array = np.array(resized) / 255
                img_array = img_array.reshape((1, 32, 32, 3))

                # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                model = tf.keras.models.load_model('cifar_conv_model.keras')
                predictions = model.predict(img_array, verbose=0)

                classes = [
                    ' –°–∞–º–æ–ª—ë—Ç', ' –ê–≤—Ç–æ–º–æ–±–∏–ª—å', ' –ü—Ç–∏—Ü–∞', ' –ö–æ—à–∫–∞', ' –û–ª–µ–Ω—å',
                    ' –°–æ–±–∞–∫–∞', ' –õ—è–≥—É—à–∫–∞', ' –õ–æ—à–∞–¥—å', ' –ö–æ—Ä–∞–±–ª—å', ' –ì—Ä—É–∑–æ–≤–∏–∫'
                ]

                # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                max_prob_idx = np.argmax(predictions[0])
                max_prob = predictions[0][max_prob_idx]

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                st.markdown(f"""
                <div class="result-card">
                    <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç: {classes[max_prob_idx]}</h3>
                    <h1>{max_prob:.1%}</h1>
                    <p>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏</p>
                </div>
                """, unsafe_allow_html=True)

                # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º
                st.subheader("üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")

                for i, (cls, prob) in enumerate(zip(classes, predictions[0])):
                    progress = int(prob * 100)
                    color = "üü¢" if i == max_prob_idx else "‚ö™"

                    col_a, col_b, col_c = st.columns([2, 6, 2])
                    with col_a:
                        st.write(f"{color} {cls}")
                    with col_b:
                        st.progress(progress, text=f"{prob:.1%}")
                    with col_c:
                        st.write(f"{prob:.1%}")

                # –ì—Ä–∞—Ñ–∏–∫
                st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π")
                fig, ax = plt.subplots(figsize=(10, 6))

                colors = ['lightcoral' if i == max_prob_idx else 'lightblue'
                          for i in range(len(classes))]

                bars = ax.barh(classes, predictions[0], color=colors)
                ax.set_xlabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å', fontsize=12)
                ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ –∫–ª–∞—Å—Å–∞–º', fontsize=14, pad=20)
                ax.set_xlim(0, 1)

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
                for bar, prob in zip(bars, predictions[0]):
                    width = bar.get_width()
                    ax.text(width + 0.01, bar.get_y() + bar.get_height() / 2,
                            f'{prob:.1%}', ha='left', va='center', fontweight='bold')

                plt.tight_layout()
                st.pyplot(fig)



if __name__ == '__main__':
    main()
